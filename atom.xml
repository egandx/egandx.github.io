<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DxBlog</title>
  
  <subtitle>一个人的小破站</subtitle>
  <link href="https://dxblog.top/atom.xml" rel="self"/>
  
  <link href="https://dxblog.top/"/>
  <updated>2021-03-11T11:48:01.148Z</updated>
  <id>https://dxblog.top/</id>
  
  <author>
    <name>Egan Dong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基础计算器II (Basic calculator II)</title>
    <link href="https://dxblog.top/2021/03/02/Basic%20calculator%20II/"/>
    <id>https://dxblog.top/2021/03/02/Basic%20calculator%20II/</id>
    <published>2021-03-02T02:22:11.000Z</published>
    <updated>2021-03-11T11:48:01.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础计算器II-Basic-calculator-II"><a href="#基础计算器II-Basic-calculator-II" class="headerlink" title="基础计算器II (Basic calculator II)"></a>基础计算器II (Basic calculator II)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给一个字符串表达式 <code>s</code> ，实现一个基本计算器来计算并返回它的值。(整数除法仅保留整数部分)</p><p><strong>提示：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 1 &lt;&#x3D; s.length &lt;&#x3D; 3 * 10^5</span><br><span class="line">2. s 由整数和算符(&#39;+&#39;, &#39;-&#39;, &#39;*&#39;, &#39;&#x2F;&#39;)组成,中间由一些空格隔开</span><br><span class="line">3. s 表示一个有效表达式</span><br><span class="line">4. 表达式中的所有整数都是非负整数,且在范围[0, 231 - 1]内</span><br><span class="line">5. 题目数据保证答案是一个32-bit整数</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;3+2*2&quot;</span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>栈的经典应用，此题没有括号，不需要进行括号匹配，相对来说简单一点，可以直接进行暴力求解。</p><ol><li><p>需要考虑运算符的优先级问题。乘除的优先级大于加减，可以先进行乘除运算，用一个栈，保存进行乘除运算后的整数的值。对于加减号后的数字，将其直接压入栈中；对于乘除号后的数字，直接与栈顶元素计算，并替换栈顶元素为计算后的结果。</p></li><li><p>遍历字符串 s，并用变量preSign记录每个数字之前的运算符，对于第一个数字，其之前的运算符视为加号。遍历到运算符或者字符串最后一位时，根据preSign来决定计算方式:</p><ul><li><p>加号：数字直接入栈；</p></li><li><p>减号：num变(-num)入栈；</p></li><li><p>乘除：num ( * or / ) stack.back()，并将栈顶元素替换为运算结果。</p></li></ul></li></ol><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li><p>时间复杂度：O(n)，其中n为字符串s的长度。需要遍历字符串s一次，计算表达式的值。</p></li><li><p>空间复杂度：O(n)，其中n为字符串s的长度。空间复杂度主要取决于栈的空间，栈的元素个数不超过n。</p></li></ul><p>需要注意的是</p><ul><li>在运算的时候，判断字符是数字还是运算符的时候，需要使用<code>isdigit()</code>函数，此函数包含在头文件<code>#include &lt;cctype&gt;</code>中。</li><li>运算的时候，如果遇到的数是大数(两位数及以上的)，需要进行处理。大数在字符串中是两个字符，需要在遍历字符串时，使用<code>num = num * 10 + int (s[i] - &#39;0&#39;);</code>对大数进行处理。</li><li>在乘除运算的结果都模拟入栈之后，使用累加函数<code>accumulate(st.begin(), st.end(), 0);</code>对数组进行累加处理，<code>accumulate()</code>函数包含在头文件<code>#include &lt;numeric&gt;</code>中，累加过程中，正负数都可以处理。</li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Demo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Egan.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; st; <span class="comment">//digits</span></span><br><span class="line">        <span class="keyword">char</span> ps = <span class="string">&#x27;+&#x27;</span>; <span class="comment">//presign</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[i]))&#123; <span class="comment">//#include &lt;cctype&gt;</span></span><br><span class="line">                num = num * <span class="number">10</span> + <span class="keyword">int</span> (s[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isdigit</span>(s[i]) &amp;&amp; s[i] != <span class="string">&#x27; &#x27;</span> || i == s.length()<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">switch</span>(ps)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span> :</span><br><span class="line">                        st.push_back(num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span> :</span><br><span class="line">                        st.push_back(-num);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span> :</span><br><span class="line">                        st.back() *= num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span> :</span><br><span class="line">                        st.back() /= num;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ps = s[i];</span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> accumulate(st.begin(), st.end(), <span class="number">0</span>); <span class="comment">//#include&lt;numeric&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础计算器II-Basic-calculator-II&quot;&gt;&lt;a href=&quot;#基础计算器II-Basic-calculator-II&quot; class=&quot;headerlink&quot; title=&quot;基础计算器II (Basic calculator II)&quot;&gt;&lt;/a&gt;基础计</summary>
      
    
    
    
    <category term="算法" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
    <category term="日常" scheme="https://dxblog.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="C++" scheme="https://dxblog.top/tags/C/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/tags/Leetcode/"/>
    
    <category term="栈" scheme="https://dxblog.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>华为OD笔试</title>
    <link href="https://dxblog.top/2021/03/02/%E5%8D%8E%E4%B8%BAOD%E7%AC%94%E8%AF%95/"/>
    <id>https://dxblog.top/2021/03/02/%E5%8D%8E%E4%B8%BAOD%E7%AC%94%E8%AF%95/</id>
    <published>2021-03-02T02:22:11.000Z</published>
    <updated>2021-03-29T06:34:33.622Z</updated>
    
    <content type="html"><![CDATA[<h2 id="华为OD岗机试"><a href="#华为OD岗机试" class="headerlink" title="华为OD岗机试"></a>华为OD岗机试</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>用一个数组A，代表程序员的工作能力。公司想通过结对编程的模式来提高员工的工作能力，假设成对后的能力是两个员工的能力之和，求一共有多少种结对方式，使结对后的能力为N。</p><p><strong>提示：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 第一行代表员工个数</span><br><span class="line">2. 第二行代表各个员工的能力值</span><br><span class="line">3. 第三行代表结对后的能力值N</span><br><span class="line">4. 输出为结对的组合方式的值</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">5</span><br><span class="line">1 2 2 2 3</span><br><span class="line">4</span><br><span class="line">输出：</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>说实话这题放在华为OD的笔试里面，应该是属于送分题，一个输入数组加两层for循环直接解就行，直接附上代码就算了。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Demo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Egan.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,N;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">1001</span>];</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x =<span class="number">0</span>; x &lt; n; x++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y= x+<span class="number">1</span>; y &lt;n; y++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x]+arr[y] == N)</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; count &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二题-错误的里程表"><a href="#第二题-错误的里程表" class="headerlink" title="第二题 错误的里程表"></a>第二题 错误的里程表</h3><p>一个汽车里程表，它以整数形式显示行驶的英里数。然而，里程表有一个缺陷:它从数字3转到数字5，总是跳过数字4。这个缺陷出现在所有的位置(1,10,100，等等)。例如，如果里程表显示为15339，而汽车行驶了1英里，里程表的读数将更改为15350(而不是15340)。</p><p><strong>提示：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 输入为里程表上的数值</span><br><span class="line">2. 输出为实际车子行驶的数值</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入1：5</span><br><span class="line">输出1：3</span><br><span class="line">输入2：17</span><br><span class="line">输出2：15</span><br><span class="line">输入3：100</span><br><span class="line">输出3：81</span><br></pre></td></tr></table></figure><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><p>之前刷题的时候，没有见过类似的题目，第一次看见还是有点懵的。本来打算暴力解的，发现自己高估了自己，暴力解决不了（或许是我太菜，没找到合适的方法）</p><p>下面的解决办法是我从网上找的，在找题解的时候，发现这类题是经典的进制转化题（刷题没见过这题，说实话还是怪自己刷题太少）</p><p>遇到4则直接从3进位到5，所以这是一道典型的进制转化问题，遍历该数字的每一位（如果这一位的数字比4大，就要减去1，因为这个位跳过了一个4），然后再遍历该数字的每一位，将其转化为10进制。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Demo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Egan.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span>(n[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> j = n.size;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> num = <span class="number">0</span>; ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> m = j<span class="number">-1</span>; m &gt;= <span class="number">0</span>; m--) &#123;</span><br><span class="line">            <span class="keyword">if</span>((n[m]-<span class="string">&#x27;0&#x27;</span>)&gt;<span class="number">4</span>)&#123;</span><br><span class="line">                num += ((n[m]-<span class="string">&#x27;0&#x27;</span>)<span class="number">-1</span>) * ans;</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                num += (n[m]-<span class="string">&#x27;0&#x27;</span>) * ans;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = ans * <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">&quot;:&quot;</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第三题-贪吃蛇算法"><a href="#第三题-贪吃蛇算法" class="headerlink" title="第三题 贪吃蛇算法"></a>第三题 贪吃蛇算法</h3><p>题目太长，具体的记不清楚了，只能大致的描述一下。。。。</p><p>输入一个字符矩阵，其中字符E是食物(蛇吃了长度+1的那种)，F是空白，H是蛇的位置(初始只占一个位置)</p><p>移动指令有5种，分别让贪吃蛇移动以及转向：G前进、U往上转、D往下转、L往左转、R往右转（初始方向为左）</p><p>结束条件是碰壁或者碰到自己就算死了。 </p><p>求按输入的指令执行之后的蛇的长度。</p><p><strong>输入输出示例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">D G G</span><br><span class="line">3</span><br><span class="line">F E F</span><br><span class="line">E E H</span><br><span class="line">F F F</span><br><span class="line">输出：</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题我0分（懂我意思吧，解题思路没法写😭，因为我压根就没有写出来🙊）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;华为OD岗机试&quot;&gt;&lt;a href=&quot;#华为OD岗机试&quot; class=&quot;headerlink&quot; title=&quot;华为OD岗机试&quot;&gt;&lt;/a&gt;华为OD岗机试&lt;/h2&gt;&lt;h3 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="日常" scheme="https://dxblog.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="工作" scheme="https://dxblog.top/categories/%E6%97%A5%E5%B8%B8/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="C++" scheme="https://dxblog.top/tags/C/"/>
    
    <category term="华为OD" scheme="https://dxblog.top/tags/%E5%8D%8E%E4%B8%BAOD/"/>
    
    <category term="笔试" scheme="https://dxblog.top/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>逆波兰表示法(Reverse Polish notation)</title>
    <link href="https://dxblog.top/2021/03/01/Reverse%20Polish%20notation/"/>
    <id>https://dxblog.top/2021/03/01/Reverse%20Polish%20notation/</id>
    <published>2021-03-01T08:12:14.000Z</published>
    <updated>2021-03-11T11:49:16.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逆波兰表示法-Reverse-Polish-notation"><a href="#逆波兰表示法-Reverse-Polish-notation" class="headerlink" title="逆波兰表示法(Reverse Polish notation)"></a>逆波兰表示法(Reverse Polish notation)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>根据逆波兰表示法，求表达式的值。</p><p>有效的运算符包括 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，<code>( 1 + 2 ) * ( 3 + 4 )</code>即便写成 <code>1 2 + 3 4 + * </code>也可以依据次序计算出正确结果。</li><li>适合用栈操作运算</li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>逆波兰表达式的求解是栈的经典应用。所以此题采用栈来解决，遇到数字则入栈，遇到运算符则取出<strong>栈顶两个数字</strong>进行运算，<strong>并将结果压入栈中</strong>。</p><p>需要注意的是</p><ul><li><p>在运算的时候，需要后取出的数字在前，先取出的数字在后，即num2在前。</p></li><li><p><code>stoi</code>表示<code>string to int</code>，即字符串转整数</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Demo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Egan.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; tokens)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tokens.size(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>||tokens[i] == <span class="string">&quot;-&quot;</span>||tokens[i] == <span class="string">&quot;*&quot;</span>||tokens[i] == <span class="string">&quot;/&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> num1 = s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                <span class="keyword">int</span> num2 = s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;+&quot;</span>) s.push(num2 + num1);</span><br><span class="line">                <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;-&quot;</span>) s.push(num2 - num1);</span><br><span class="line">                <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;*&quot;</span>) s.push(num2 * num1);</span><br><span class="line">                <span class="keyword">if</span>(tokens[i] == <span class="string">&quot;/&quot;</span>) s.push(num2 / num1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s.push(stoi(tokens[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = s.top();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;逆波兰表示法-Reverse-Polish-notation&quot;&gt;&lt;a href=&quot;#逆波兰表示法-Reverse-Polish-notation&quot; class=&quot;headerlink&quot; title=&quot;逆波兰表示法(Reverse Polish notation)&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
    <category term="日常" scheme="https://dxblog.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="C++" scheme="https://dxblog.top/tags/C/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/tags/Leetcode/"/>
    
    <category term="栈" scheme="https://dxblog.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>Ming&#39;s random numbers</title>
    <link href="https://dxblog.top/2021/02/22/Ming&#39;s%20random%20numbers/"/>
    <id>https://dxblog.top/2021/02/22/Ming&#39;s%20random%20numbers/</id>
    <published>2021-02-22T05:46:57.000Z</published>
    <updated>2021-03-10T14:02:51.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="明明的随机数"><a href="#明明的随机数" class="headerlink" title="明明的随机数"></a>明明的随机数</h2><p>明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N≤1000），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成“去重”与“排序”的工作(同一个测试用例里可能会有多组数据(用于不同的调查)，希望大家能正确处理)</p><p>这是华为的一道面试题。在原文中已经明确点出了所需的一些函数，分别是排序和去重。C++有现成的排序函数<code>sort()</code>，以及去重函数<code>unique()</code>。其中<code>unique()</code>,<code>sort()</code>都是属于头文件<code>#include &lt;algorithm&gt;</code></p><p><code>auto end_un = unique(vec.begin(),vec.end());</code></p><p>这里的<code>unique()</code>返回的值是<font color="#dd0000">最后一个不重复数字的下标。</font></p><p>sort函数有三个参数：</p><ul><li><p>第一个是要排序的数组的起始地址</p></li><li><p>第二个是结束的地址（最后一位要排序的地址)</p></li><li><p>第三个参数是排序的方法，可以是升序也可是降序。如果不写第三个参数，则默认的排序方法是升序排列</p></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//升序</span></span><br><span class="line">sort( a, b, less&lt;<span class="keyword">int</span>&gt;() );</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//降序</span></span><br><span class="line">sort( a, b, greater&lt;<span class="keyword">int</span>&gt;() );</span><br></pre></td></tr></table></figure><p>如果先<code>去重</code>再<code>排序</code>，那么<code>去重</code>就有可能不会发挥作用。因为<code>去重</code>再<code>排序</code>排序时会把重复的数字又放在了一起，所以要先<code>排序</code>再<code>去重</code>。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  Demo</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Egan.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">int</span> n= <span class="number">0</span>,num = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//input</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">            vec.push_back(num);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//sort</span></span><br><span class="line">        sort(vec.begin(), vec.end());</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//unique</span></span><br><span class="line">        <span class="keyword">auto</span> end_un = unique(vec.begin(),vec.end());</span><br><span class="line">        vec.erase(end_un, vec.end());</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> m = vec.begin(); m != vec.end(); m ++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;明明的随机数&quot;&gt;&lt;a href=&quot;#明明的随机数&quot; class=&quot;headerlink&quot; title=&quot;明明的随机数&quot;&gt;&lt;/a&gt;明明的随机数&lt;/h2&gt;&lt;p&gt;明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整</summary>
      
    
    
    
    <category term="算法" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/categories/%E7%AE%97%E6%B3%95/Leetcode/"/>
    
    
    <category term="日常" scheme="https://dxblog.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="C++" scheme="https://dxblog.top/tags/C/"/>
    
    <category term="sort" scheme="https://dxblog.top/tags/sort/"/>
    
    <category term="unique" scheme="https://dxblog.top/tags/unique/"/>
    
    <category term="Leetcode" scheme="https://dxblog.top/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>毕业半年的自己</title>
    <link href="https://dxblog.top/2020/12/22/Six_months_after_graduation/"/>
    <id>https://dxblog.top/2020/12/22/Six_months_after_graduation/</id>
    <published>2020-12-22T05:46:57.000Z</published>
    <updated>2021-03-04T12:09:00.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="半年之后"><a href="#半年之后" class="headerlink" title="半年之后"></a>半年之后</h2><p>&emsp;我们这届的毕业生，大学只上了三年半，最后半年的时光都是在家里渡过。拿毕业证学位证、拍毕业照以及收拾行李，加起来不过两天时间。一切都是匆匆忙忙，匆忙到连一顿散伙饭都没法进行。<br><br>&emsp;还差几日，自己也就毕业半年了，也算是有了半年的<del>工作经验</del>(划水经验)，学软件的我，毕业之后进了一家偏自动化的公司，工业4.0时代嘛，天天代码倒是不多，就是比较累。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;半年之后&quot;&gt;&lt;a href=&quot;#半年之后&quot; class=&quot;headerlink&quot; title=&quot;半年之后&quot;&gt;&lt;/a&gt;半年之后&lt;/h2&gt;&lt;p&gt;&amp;emsp;我们这届的毕业生，大学只上了三年半，最后半年的时光都是在家里渡过。拿毕业证学位证、拍毕业照以及收拾行李，加起来不</summary>
      
    
    
    
    <category term="日常" scheme="https://dxblog.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="工作" scheme="https://dxblog.top/categories/%E6%97%A5%E5%B8%B8/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="日常" scheme="https://dxblog.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="杂记" scheme="https://dxblog.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="https://dxblog.top/2020/10/22/firstPage/"/>
    <id>https://dxblog.top/2020/10/22/firstPage/</id>
    <published>2020-10-22T03:10:47.000Z</published>
    <updated>2021-03-04T11:56:58.360Z</updated>
    
    <content type="html"><![CDATA[<p><strong>测试文档</strong></p><pre><code>从这一篇测试文档开始，希望自己能够收起懒惰，重拾激情</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;测试文档&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;从这一篇测试文档开始，希望自己能够收起懒惰，重拾激情&lt;/code&gt;&lt;/pre&gt;
</summary>
      
    
    
    
    
    <category term="Test" scheme="https://dxblog.top/tags/Test/"/>
    
  </entry>
  
</feed>
